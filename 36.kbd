;; ----------------------------------------------------------------------------------------
;; matrix, what to remap

(defsrc
 f24       f1   f2   f3   f4   f5               f6   f7   f8   f9   f10      f11  f12  del
 grv       1    2    3    4    5                6    7    8    9    0        -    =    bspc

 tab       q    w    e    r    t                y    u    i    o    p        [    ]    \
 caps      a    s    d    f    g                h    j    k    l    ;        '
 lsft      z    x    c    v    b                n    m    ,    .    /
 lctl                     esc  spc              ret  rsft

                          lalt                       rctl
                          lmet                  ralt rmet
)

;; -------------------------------------------------------------------------------------
;; main typing layers

(deflayer eng ;; colemak
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _        @tdq  w    f    p    g               @tdj  l    u    y   @td'      _    _    _
@lfun     @ha  @hr  @hs  @ht   d                h   @hn  @he  @hi  @ho       ;
 _        @lz   x    c    v    b               @lk   m   @,?  @.!  @l/:
 _                      @lfun @nav             @num @rfun

                        @lfun                       @rfun
                        @lfun                  @num @rfun
)

(deflayer rus ;; diktor
 _          _    _    _    _    _                _    _    _    _    _       _    _    _
@ё         @1   @2    3   @4   @5               @6   @7   @8    9    0      @star =    _

 _         @tdц @*ь  @я   @,?  @.!              @з   @в   @к   @д   @tdч    @ш   @щ    _
@lfun      @hу  @hи  @hе  @hо  @а               @л   @hн  @hт  @hс  @hр     @й
 _         @lф  @э   @х   @ы   @ю               @lб  @м   @п   @г   @lж
 _                       @lfun @nav             @num @rfun

                         @lfun                       @rfun
                         @lfun                  @num @rfun
)

;; -------------------------------------------------------------------------------------
;; disable remapping - activate it when your frend is using your keyboard
;;   move it up to first defined layer if you want to keep config
;;   on your grandmother's laptop

(deflayer qwe ;; no remapping
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _
 _         _    _    _    _    _               @ln   _    _    _    _ 
 _                        _    _                _    _

                          _                          _     
                          _                     _    _
)

;; -------------------------------------------------------------------------------------
;; backup, unicode typing for Russian language

(deflayer rus_u ;; diktor
 _          _    _    _    _    _                _    _    _    _    _       _    _    _
 @_ё       @_1  @_2  @_3  @_4  @_5              @_6  @_7  @_8   9    0      @star =    _

 _         @_ц  @_ь  @_я  @_,? @_.!             @_з  @_в  @_к  @_д  @_ч     @_ш  @_щ   _
@lfun      @_hу @_hи @_hе @_hо @_а              @_л  @_hн @_hт @_hс @_hр    @_й
 _         @_lф @_э  @_х  @_ы  @_ю              @_lб @_м  @_п  @_г  @_lж
 _                       @lfun @nav             @num @rfun

                         @lfun                       @rfun
                         @lfun                  @num @rfun
)

;; -------------------------------------------------------------------------------------
;; gaming layer and sublayers

(deflayer gam ;; gaming layer
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
@gesc      _    _    _    _    _                _    _    _    _    _        _    _    _

 i        @ftab q    w    e    r                XX   XX   up   XX  @ftab     _    _    _
 caps      lsft a    s    d    f                XX   left down rght rsft     _
 m         lctl z    x    c   @vb              @ln   XX   XX   XX   rctl
 _                       @galt spc              ret @gprnt

                         @galt                      @gprnt
                         @galt                  ret @gprnt
)

(deflayer gfn ;; fn for gaming layer
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _       @gesc  1    2    3    t                _    _    _    _    _        _    _    _
 _        caps @h4  @h5  @h6   o                _    _    _    _    _        _
 _        m     j    i    g    p                _    _    _    _    _ 
 _                        XX  ret               _    _

                          XX                         _     
                          XX                    _    _
)

(deflayer gam_r ;; gaming layer for racing games
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
@gesc      _    _    _    _    _                _    _    _    _    _        _    _    _

 _        @ftab XX   up   XX   XX               XX   XX   up   XX  @ftab     _    _    _
 _         lsft left down rght XX               XX   left down rght rsft     _
 _         lctl XX   XX   XX   XX              @ln   XX   XX   XX   rctl
 _                       @galt spc              spc @galt

                         @galt                      @galt
                         @galt                  spc @galt
)

;; -------------------------------------------------------------------------------------
;; layers with extra buttons: numeric, symbol, function

(deflayer num ;; numeric and punctuation layer
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _        @«”   7    8    9   @₽               lrld @—   @≈   @°   @del      _    _    _
 _        @h:  @h4  @h5  @h6  @+               @%   @hn- @h;  @h_  @hbspc    _
 _         0    1    2    3   @$               @at   =   @,?  @.!  @kill
 _                      @lfun @lsym            @num @rfun

                        @lfun                       @rfun
                        @lfun                  @num @rfun
)

(deflayer sym ;; symbol layer
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _        @“   @<    =   @>   @`               @^   @[   @_   @]   @'        _    _    _
 _        @h\  @hlb @h-  @hrb @+               @%   @h{  @h;  @h}  @h!       _
 _        @#   @*   @:   @/   @$               @at  @|   @~   @&   @?        
 _                      @lfun @nav             @num @rfun

                        @lfun                       @rfun
                        @lfun                  @num @rfun
)

(deflayer fun ;; function, media and keypad layer
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _         f12  f7   f8   f9  volu             @dr0  kp7  kp8  kp9 @del      _    _    _
 _        @f11 @f4  @f5  @f6  vold             @dms @kp4 @kp5 @kp6 @hbspc    _
 _         f10  f1   f2   f3  mute             @dp0  kp1  kp2  kp3 @croll
 _                       nlck @nav              kp0  nlck

                         nlck                        nlck
                         nlck                   kp0  nlck
)

;; ------------------------------------------------------------------------------------------
;; layers for navigation, edition and function

(deflayer nav ;; navigation layer
 _         _    _     _    _     _                _    _    _    _    _         _    _    _
 f13       f1   f2    f3   f3    f5               f6   f7   f8   f9   f10       f11  f12  del

 _       @qdel @tlft  tab @trgt @lnch             ins  home up   end  del       _    _    _
 _         lmet lalt @lctl lsft @prnt            @mcon left down rght bspc      _
 _         C-z  C-x   C-c  C-v  @redo             mltp pgup menu pgdn @file 
 _                        @lfun @nav             @rsym @rfun

                          @lfun                        @rfun
                          @lfun                  @rsym @rfun
)

(deflayer nav_mac ;; navigation layer
 _         _    _     _    _     _                _    _    _    _    _         _    _    _
 f13       f1   f2    f3   f3    f5               f6   f7   f8   f9   f10       f11  f12  del

 _       @qbspc @tlft tab @trgt @lnch             ins @home up  @end @del       _    _    _
 _         lctl @ocm @mopt lsft @prnt            @mcon left down rght bspc      _
 _         M-z  M-x   M-c  M-v  @redo             mltp pgup menu pgdn @file 
 _                        @lfun @nav             @rsym @rfun

                          @lfun                        @rfun
                          @lfun                  @rsym @rfun
)

(deflayer mos ;; mouse layer
 _         _    _       _    _      _           _    _    _    _    _        _    _    _
 _         _    _       _    _      _           _    _    _    _    _        _    _    _

 _         del @tlft  tab @trgt @lnch           _   @mwl @mu  @mwr @mwu      _    _    _
 _         lmet lalt @lctl lsft @prnt           _   @ml  @md  @mr  @mwd      _
 _         C-z  C-x   C-c  C-v  @redo           _    mltp mrtp mmtp @file
 _                        @lfun @nav            mltp mrtp

                          @lfun                      mrtp
                          @lfun                 mltp mrtp
)

(deflayer mos_mac ;; mouse layer
 _         _    _       _    _      _           _    _    _    _    _        _    _    _
 _         _    _       _    _      _           _    _    _    _    _        _    _    _

 _         bspc @tlft tab @trgt @lnch           _   @mwl @mu  @mwr @mwu      _    _    _
 _         lctl @ocm @mopt lsft @prnt           _   @ml  @md  @mr  @mwd      _
 _         M-z  M-x   M-c  M-v  @redo           _    mltp mrtp mmtp @file
 _                        @lfun @nav            mltp mrtp

                          @lfun                      mrtp
                          @lfun                 mltp mrtp
)

;; -------------------------------------------------------------------------------------
;; layer to switch betwen typing and gaming layers and toggle mods if any

(deflayer swi ;; switcher, layer to switch layers
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _  @gam_r @gam @qwe _                _  @qwe @gam @gam_r _        _
 _         _  @rus_u @rus @eng _                _  @eng @rus @rus_u _ 
 _                        _    _                _    _
                          _                          _     
                          _                     _    _
)

;; -------------------------------------------------------------------------------------
;; alt layers,
;; replace default eng and rus to use alternative layouts

(deflayer eng_qwerty
 _         _    _    _    _    _                _    _    _    _    _        _    _    _
 _         _    _    _    _    _                _    _    _    _    _        _    _    _

 _        @tdq  w    e    r    t                y    u    i    o    p        _    _    _
@lfun     @ha  @hqs @hd  @hf   g                h   @hj  @hk  @hl  @hq'      ;
 _        @lz   x    c    v    b                n    m   @,?  @.!  @l/:
 _                      @lfun @nav             @num @rfun

                        @lfun                       @rfun
                        @lfun                  @num @rfun
)

(deflayer rus_йцукен
 _          _    _    _    _    _                _    _    _    _    _       _    _    _
@ё          _    _    _    _    _                _    _    _    _    _       _    _    _

 _         @tdй @ц   @у   @к   @е               @н   @г   @ш   @щ   @з      @х   @ъ    _
@lfun      @hф  @hы  @hв  @hа  @п               @р   @hо  @hл  @hд  @hж     @э
 _         @я   @ч   @с   @м   @и               @т   @ьъ  @б   @ю   @.,
 _                       @lfun @nav             @num @rfun

                         @lfun                       @rfun
                         @lfun                  @num @rfun
)

;; -------------------------------------------------------------------------------------
;; combo definition

(defcfg concurrent-tap-hold yes)
(defchordsv2
  (e r) @eng $hold-time all-released    (               gam gam_r gfn num sym fun nav mos qwe)
  (w e) @rus $hold-time all-released    (               gam gam_r gfn num sym fun nav mos qwe)
  (c v) @rus_u $hold-time all-released  (               gam gam_r gfn num sym fun nav mos qwe)
  (r t) @“” $hold-time all-released     (               gam gam_r gfn         fun nav mos qwe)
  (y u) -   $hold-time all-released     (                   gam_r gfn         fun nav mos qwe)
  (s f) @brc $hold-time all-released    (eng rus rus_u  gam gam_r gfn         fun nav mos qwe)
  (u o) @[]  $hold-time all-released    (eng rus rus_u  gam gam_r gfn         fun nav mos qwe)
  (j l) @{}  $hold-time all-released    (eng rus rus_u  gam gam_r gfn         fun nav mos qwe)
  (w r) @<>  $hold-time all-released    (eng rus rus_u  gam gam_r gfn         fun nav mos qwe)
  (m .) @-[] $hold-time all-released    (eng rus rus_u  gam gam_r gfn         fun nav mos qwe)
  ;; comment following letters if you want to use йцукен instead of diktor
  (i o) @йЙ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe) ;; diktor
  (u i) @ёЁ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe) ;; diktor
  (m ,) @шШ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe) ;; diktor
  (, .) @щЩ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe) ;; diktor
  ;; uncomment if you use йцукен instead of diktor and need additional letters on combos
  ;; (i o) @хХ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe)
  ;; (u i) @ёЁ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe)
  ;; (m ,) @ъЪ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe)
  ;; (, .) @эЭ $hold-time all-released     (eng            gam gfn gam_r num sym fun nav mos qwe)
)

;; -------------------------------------------------------------------------------------
;; platform specific configs

;; -------------------------------------------------------------------------------------
;; Microsoft Windows

(platform (win winiov2 wintercept)
  (defalias
    ;; system combinations to switch languages
    en C-S-8 ;; it can be set in windows language settings
    ru C-S-9 ;; no additional software needed
    ;; other alias
    launch lmet ;; launch applications
    mcon M-tab ;; Mission Control, Windows default
    file M-e ;; Launch file manager
    close_window (multi (release-key lsft) (release-key rsft) A-f4)
    kill (tap-dance 400 ( @close_window C-S-esc )) ;; Close current window or kill any app
    gprnt prnt ;; Make a screenshot - full screen
    prnt (tap-dance 400 ( M-S-s A-prnt prnt )) ;; Make a screenshot - region, window, screen
    redo C-y
  )
)

;; -------------------------------------------------------------------------------------
;; GNU Linux

(platform (linux)
  (defalias
    ;; system combinations to switch languages
    en caps   ;; this can be set in most modern desktop environments
    ru S-caps ;; usually, in "Key bindings" -> "Switching to another layout"
    ;; other alias, KDE Plasma specific
    redo C-S-z
  )
)
;; as environment variable should be set in context of Kanata,
;; if you want to create systemd service (which runs before desktop environment)
;; you have to hardcode variable inside service
;; (/etc/systemd/system/kanata.service), like this:
#|
[Unit]
Description=Kanata Keyboard Remapping Service
After=network.target

[Service]
Environment=XDG_CURRENT_DESKTOP=KDE
ExecStart=/usr/bin/kanata -c /home/username/path/to/config/kanata.kbd
Restart=always
User=root

[Install]
WantedBy=multi-user.target
|#
;; Then run
#|
sudo systemctl daemon-reload
sudo systemctl restart kanata.service
|#
;; then check if it is running as expected:
#|
journalctl -u kanata.service -f
|#
(environment (XDG_CURRENT_DESKTOP KDE)
 (defalias
   launch A-spc ;; launch applications
   mcon M-w ;; Mission Control, KDE Plasma default
   file M-e ;; Launch file manager
   close_window (multi (release-key lsft) (release-key rsft) C-q)
   kill (tap-dance 400 ( @close_window M-A-esc )) ;; Close current window or kill any app
   gprnt prnt ;; Make a screenshot - full screen
   prnt (tap-dance 400 ( M-S-prnt M-prnt S-prnt prnt )) ;; Make a screenshot - region, window, screen
 )
)
(environment (XDG_CURRENT_DESKTOP GNOME)
 (defalias
   launch lmet ;; launch applications
   mcon lmet ;; Mission Control, Gnome default
   file C-A-e ;; Launch file manager
   close_window (multi (release-key lsft) (release-key rsft) C-q)
   kill @close_window ;; Close current window
   gprnt prnt ;; Make a screenshot - full screen
   prnt (tap-dance 400 ( S-prnt M-prnt prnt )) ;; Make a screenshot - region, window, screen
 )
)
(environment (XDG_CURRENT_DESKTOP ubuntu:GNOME)
 (defalias
   launch lmet ;; launch applications
   mcon lmet ;; Mission Control, Gnome default
   file M-e ;; Launch file manager
   close_window (multi (release-key lsft) (release-key rsft) C-q)
   kill @close_window ;; Close current window
   gprnt prnt ;; Make a screenshot - full screen
   prnt (tap-dance 400 ( S-prnt M-prnt prnt )) ;; Make a screenshot - region, window, screen
 )
)
(environment (XDG_CURRENT_DESKTOP "")
 (defalias
   launch lmet ;; launch applications
   mcon lmet ;; Mission Control, other desktops
   file C-A-e ;; Launch file manager
   close_window (multi (release-key lsft) (release-key rsft) A-f4)
   kill @close_window ;; Close current window
   gprnt prnt ;; Make a screenshot - full screen
   prnt (tap-dance 400 ( S-prnt M-prnt prnt )) ;; Make a screenshot - region, window, screen
 )
)

;; -------------------------------------------------------------------------------------
;; Apple MacOS

(platform (macos)
  (defalias
    ;; system combinations to switch languages
    en C-S-8 ;; there is no default setting to set this in MacOS
    ru C-S-9 ;; use Kawa: https://github.com/hatashiro/kawa
    ;; other alias
    launch M-spc ;; launch applications
    tlft M-S-[
    trgt M-S-]
    home (fork M-left M-up (lalt))
    end (fork M-rght M-down (lalt))
    mcon mctl ;; Mission Control, MacOS native
    file A-M-spc ;; Launch file manager
    close_window (multi (release-key lsft) (release-key rsft) M-q)
    kill (tap-dance 400 ( @close_window A-M-esc )) ;; Close current window or kill any app
    gprnt M-S-3 ;; Make a screenshot - full screen
    prnt (tap-dance 400 ( M-S-4 (macro M-S-4 spc) M-S-3 )) ;; Make a screenshot - region, window, screen
    redo M-S-z
	del C-d
	galt (tap-hold $tap-time $hold-time lmet (layer-toggle gfn))
  )
)

;; -------------------------------------------------------------------------------------
;; Both, Linux and Windows

(platform (win winiov2 wintercept linux)
  (defalias
    tlft C-S-tab
    trgt C-tab
    home home
    end end
	del del
	galt (tap-hold $tap-time $hold-time lalt (layer-toggle gfn))
  )
)

(defalias
  ;; -------------------------------------------------------------------------------------
  ;; layouts switching

  eng (multi (layer-switch eng) @en)
  rus (multi (layer-switch rus) @ru)
  rus_u (multi (layer-switch rus_u) @en)
  gam (multi (layer-switch gam) @en)
  gam_r (multi (layer-switch gam_r) @en)
  qwe (multi (layer-switch qwe) @en)

  ;; -------------------------------------------------------------------------------------
  ;; symbols definition

  ;; sym
  ;; to use this symbols, you have to ensure:
  ;; - that you have US (qwerty) and RU (йцукен) layouts set in the system
  ;; - set separate activation shortcuts for @en and @ru - just look at the definitions
  % S-5
  + S-=
  * S-8
  _ S--
  lb S-9
  rb S-0
  { (switch ((base-layer rus)) (macro @en 50 S-[ 50 @ru) break () S-[ break )
  ; (switch ((base-layer rus)) S-4 break () ; break )
  } (switch ((base-layer rus)) (macro @en 50 S-] 50 @ru) break () S-] break )
  ! S-1
  # (switch ((base-layer rus)) (macro @en 50 S-3 50 @ru) break () S-3 break)
  $ (switch ((base-layer rus)) (macro @en 50 S-4 50 @ru) break () S-4 break)
  & (switch ((base-layer rus)) (macro @en 50 S-7 50 @ru) break () S-7 break)
  ' (switch ((base-layer rus)) (macro @en 50 ' 50 @ru) break () ' break)
  < (switch ((base-layer rus)) (macro @en 50 S-, 50 @ru) break () S-, break)
  > (switch ((base-layer rus)) (macro @en 50 S-. 50 @ru) break () S-. break)
  [ (switch ((base-layer rus)) (macro @en 50 [ 50 @ru) break () [ break)
  ] (switch ((base-layer rus)) (macro @en 50 ] 50 @ru) break () ] break)
  ^ (switch ((base-layer rus)) (macro @en 50 S-6 50 @ru) break () S-6 break)
  ` (switch ((base-layer rus)) (macro @en 50 grv 50 @ru) break () grv break)
  at (switch ((base-layer rus)) (macro @en 50 S-2 50 @ru) break () S-2 break)
  “ (switch ((base-layer rus)) S-2 break () S-' break)
  : (switch ((base-layer rus)) S-6 break () S-; break)
  | (switch ((base-layer rus)) (macro @en 50 S-\ 50 @ru) break () S-\ break)
  ~ (switch ((base-layer rus)) (macro @en 50 S-grv 50 @ru) break () S-grv break)
  , (switch ((base-layer rus)) S-/ break () , break )
  . (switch ((base-layer rus)) / break () . break )
  ? (switch ((base-layer rus)) S-7 break () S-/ break )
  / (switch ((base-layer rus)) S-\ break () / break )
  № (switch ((base-layer rus)) S-3 break () (macro @ru 50 S-3 50 @en) break)
  ,? (switch ((base-layer rus)) (fork S-/ S-7 (lsft rsft)) break () (fork , S-/ (lsft rsft)) break )
  .! (switch ((base-layer rus)) (fork / S-1 (lsft rsft)) break () (fork . S-1 (lsft rsft)) break )
  ., (switch ((base-layer rus)) (fork / S-/ (lsft rsft)) break () (fork . , (lsft rsft)) break )
  “” (switch ((base-layer rus)) (tap-dance-eager 400 ( (macro S-2) (macro bspc S-2 S-2 left) (macro S-2 S-2 left) (macro S-2 S-2 left))) break () (tap-dance-eager 300 ( (macro S-') (macro bspc S-' S-' left) (macro S-' S-' left) (macro S-' S-' left))) break )
  '' (switch ((base-layer rus)) (tap-dance-eager 400 ( (macro @en 50 ' 50 @ru) (macro @en 50 ' 30 @ru 20 left) (macro @en 50 ' ' 30 @ru 20 left) (macro @en 50 ' ' 30 @ru 20 left))) break () (tap-dance-eager 300 ( (macro ') (macro ' left) (macro ' ' left) (macro ' ' left))) break )

  ;; fun
  dr0 (dynamic-macro-record 0)
  dms dynamic-macro-record-stop
  dp0 (dynamic-macro-play 0)

  ;; gam
  vb (fork v b (lsft rsft))

  ;; -------------------------------------------------------------------------------------
  ;; navigation and edition specific

  ;; nav
  lctl (switch ((base-layer rus)) lctl break ((base-layer rus_u)) lctl break () (one-shot 500 lctl) break )
  lmet (switch ((base-layer rus)) lmet break ((base-layer rus_u)) lmet break () (one-shot 500 lmet) break )

  ;; mos
  mu (movemouse-up 1 1)
  md (movemouse-down 1 1)
  ml (movemouse-left 1 1)
  mr (movemouse-right 1 1)
  mwu (mwheel-up 50 120)
  mwd (mwheel-down 50 120)
  mwl (mwheel-left 50 120)
  mwr (mwheel-right 50 120)
  
  ;; -------------------------------------------------------------------------------------
  ;; custom shifted things

  gesc (fork esc (unmod grv) (lsft rsft))
  croll (fork caps (unmod slck) (lsft rsft))
  qdel (fork del @close_window (lsft rsft))
  qbspc (fork bspc @close_window (lsft rsft))

  ;; -------------------------------------------------------------------------------------
  ;; special actions for English layer

  ;; eng
  l/: (tap-hold $tap-time $hold-pinky (fork / S-; (lsft rsft)) (layer-toggle fun))
  l/ (tap-hold $tap-time $hold-pinky / (layer-toggle fun))
  ln (tap-hold $tap-time $hold-pinky n (layer-toggle swi))
  lk (tap-hold $tap-time $hold-pinky k (layer-toggle swi))
  td' (tap-dance-eager 300 ( (macro ') (macro ' left) (macro ' ' left) (macro ' ' left)))
  tdq (tap-dance-eager 300 ( (macro q) (macro bspc S-' S-' left) (macro S-' S-' left) (macro S-' S-' left)))
  tdj (tap-dance-eager 300 ( (macro j) (macro bspc grv grv left) (macro grv grv left) (macro grv grv left)))

  ;; -------------------------------------------------------------------------------------
  ;; Russian letters

  ;; rus
  1 (fork 1 S-] (lsft rsft)) ;; diktor
  2 (fork 2 S-m (lsft rsft)) ;; diktor
  ;; 3 is the same in йцукен ;; diktor
  4 (fork 4 S-5 (lsft rsft)) ;; diktor
  5 (fork 5 S-6 (lsft rsft)) ;; diktor
  6 (fork 6 S-4 (lsft rsft)) ;; diktor
  7 (fork 7 (unmod -) (lsft rsft)) ;; diktor
  8 (fork 8 S-2 (lsft rsft)) ;; diktor
  ;; 9 is the same in йцукен ;; diktor
  ;; 0 is the same in йцукен ;; diktor
  star (fork S-8 S-- (lsft rsft)) ;; diktor
  ц w
  ь m
  ьъ (fork m (unmod ]) (lsft rsft)) ;; diktor
  я z
  з p
  в d
  к r
  д l
  ч x
  ш i
  щ o
  у e
  и b
  е t
  о j
  а f
  л k
  н y
  т n
  с c
  р h
  й q
  ф a
  э '
  х [
  ъ ]
  ы s
  ю .
  б ,
  м v
  п g
  г u
  ж ;
  ё grv
  lж (tap-hold $tap-time $hold-pinky @ж (layer-toggle fun))
  lб (tap-hold $tap-time $hold-pinky @б (layer-toggle swi))
  tdц (tap-dance-eager 500 ( (macro @ц) (macro bspc S-2 S-2 left) (macro S-2 S-2 left) (macro S-2 S-2 left)))
  tdй (tap-dance-eager 500 ( (macro @й) (macro bspc S-2 S-2 left) (macro S-2 S-2 left) (macro S-2 S-2 left)))
  tdч (tap-dance-eager 500 ( (macro @ч) (macro bspc @en 50 ' ' 30 @ru 20 left) (macro @en 50 ' ' 30 @ru 20 left) (macro @en 50 ' ' 30 @ru 20 left)))
  *ь (switch
    ((key-history f 1)) (macro n m) break ;; а - ть
    ((key-history j 1)) (macro d f) break ;; о - ва
	() @ьъ break
  )

  ;; -------------------------------------------------------------------------------------
  ;; Russian letters, implemented as unicode symbols

  ;; rus_u
  Ъ (unicode Ъ)
  _1 (fork 1 @Ъ (lsft rsft))
  Ь (unicode Ь)
  _2 (fork 2 @Ь (lsft rsft))
  u№ (unicode №)
  _3 (fork 3 @u№ (lsft rsft))
  _4 (fork 4 S-5 (lsft rsft))
  _5 (fork 5 S-; (lsft rsft))
  _6 (fork 6 ; (lsft rsft))
  _7 (fork 7 (unmod -) (lsft rsft))
  _8 (fork 8 S-' (lsft rsft))
  uц (unicode ц)
  uЦ (unicode Ц)
  _ц (fork @uц @uЦ (lsft rsft))
  uь (unicode ь)
  uъ (unicode ъ)
  uЪ (unicode Ъ)
  _ь (fork @uь @uъ (lsft rsft))
  _ъ (fork @uъ @uЪ (lsft rsft))
  uя (unicode я)
  uЯ (unicode Я)
  _я (fork @uя @uЯ (lsft rsft))
  u, (unicode ,)
  u? (unicode ?)
  _,? (fork @u, @u? (lsft rsft))
  u. (unicode .)
  u! (unicode !)
  _.! (fork @u. @u! (lsft rsft))
  uз (unicode з)
  uЗ (unicode З)
  _з (fork @uз @uЗ (lsft rsft))
  uв (unicode в)
  uВ (unicode В)
  _в (fork @uв @uВ (lsft rsft))
  uк (unicode к)
  uК (unicode К)
  _к (fork @uк @uК (lsft rsft))
  uд (unicode д)
  uД (unicode Д)
  _д (fork @uд @uД (lsft rsft))
  uч (unicode ч)
  uЧ (unicode Ч)
  _ч (fork @uч @uЧ (lsft rsft))
  uш (unicode ш)
  uШ (unicode Ш)
  _ш (fork @uш @uШ (lsft rsft))
  uщ (unicode щ)
  uЩ (unicode Щ)
  _щ (fork @uщ @uЩ (lsft rsft))
  uу (unicode у)
  uУ (unicode У)
  _у (fork @uу @uУ (lsft rsft))
  uи (unicode и)
  uИ (unicode И)
  _и (fork @uи @uИ (lsft rsft))
  uе (unicode е)
  uЕ (unicode Е)
  _е (fork @uе @uЕ (lsft rsft))
  uо (unicode о)
  uО (unicode О)
  _о (fork @uо @uО (lsft rsft))
  uа (unicode а)
  uА (unicode А)
  _а (fork @uа @uА (lsft rsft))
  uл (unicode л)
  uЛ (unicode Л)
  _л (fork @uл @uЛ (lsft rsft))
  uн (unicode н)
  uН (unicode Н)
  _н (fork @uн @uН (lsft rsft))
  uт (unicode т)
  uТ (unicode Т)
  _т (fork @uт @uТ (lsft rsft))
  uс (unicode с)
  uС (unicode С)
  _с (fork @uс @uС (lsft rsft))
  uр (unicode р)
  uР (unicode Р)
  _р (fork @uр @uР (lsft rsft))
  uй (unicode й)
  uЙ (unicode Й)
  _й (fork @uй @uЙ (lsft rsft))
  uф (unicode ф)
  uФ (unicode Ф)
  _ф (fork @uф @uФ (lsft rsft))
  uэ (unicode э)
  uЭ (unicode Э)
  _э (fork @uэ @uЭ (lsft rsft))
  uх (unicode х)
  uХ (unicode Х)
  _х (fork @uх @uХ (lsft rsft))
  uы (unicode ы)
  uЫ (unicode Ы)
  _ы (fork @uы @uЫ (lsft rsft))
  uю (unicode ю)
  uЮ (unicode Ю)
  _ю (fork @uю @uЮ (lsft rsft))
  uб (unicode б)
  uБ (unicode Б)
  _б (fork @uб @uБ (lsft rsft))
  uм (unicode м)
  uМ (unicode М)
  _м (fork @uм @uМ (lsft rsft))
  uп (unicode п)
  uП (unicode П)
  _п (fork @uп @uП (lsft rsft))
  uг (unicode г)
  uГ (unicode Г)
  _г (fork @uг @uГ (lsft rsft))
  uж (unicode ж)
  uЖ (unicode Ж)
  _ж (fork @uж @uЖ (lsft rsft))
  uё (unicode ё)
  uЁ (unicode Ё)
  _ё (fork @uё @uЁ (lsft rsft))
  _lж (tap-hold $tap-time $hold-pinky @_ж (layer-toggle fun))
  _lб (tap-hold $tap-time $hold-pinky @_б (layer-toggle swi))
  йЙ (switch ((base-layer rus)) @й break ((base-layer rus_u)) @_й break )
  ёЁ (switch ((base-layer rus)) grv break ((base-layer rus_u)) @_ё break )
  шШ (switch ((base-layer rus)) @ш break ((base-layer rus_u)) @_ш break )
  щЩ (switch ((base-layer rus)) @щ break ((base-layer rus_u)) @_щ break )
  хХ (switch ((base-layer rus)) @х break ((base-layer rus_u)) @_х break )
  эЭ (switch ((base-layer rus)) @э break ((base-layer rus_u)) @_э break )
  ъЪ (switch ((base-layer rus)) @ъ break ((base-layer rus_u)) @_ъ break )

  ;; -------------------------------------------------------------------------------------
  ;; Macros and special buttons with complicated logic

  ;; launch visual studio code
  vscode (macro @launch 300 S-v i s u a l 50 spc S-s t u d i o 50 spc S-c o d e 400 ret)
  vscodr (macro @en 50 @launch 300 S-v i s u a l 50 spc S-s t u d i o 50 spc S-c o d e 400 ret 50 @ru)
  vsc (switch ((base-layer rus)) @vscodr break () @vscode break )
  ;; launch terminal
  term (macro @launch 300 S-t e r m i n a l 400 ret)
  terr (macro @en 50 @launch 300 S-t e r m i n a l 400 ret 50 @ru)
  ter (switch ((base-layer rus)) @terr break () @term break )
  ;; tap dance to launch applications
  lnch (tap-dance 500 ( @ter @vsc ))
  ;; emdash
  u— (unicode —)
  ur— (macro @en 50 @u— 50 @ru)
  — (switch ((base-layer rus)) @ur— break () @u— break )
  ;; ruble currency sign
  u₽ (unicode ₽)
  ur₽ (macro @en 50 @u₽ 50 @ru)
  ₽ (switch ((base-layer rus)) @ur₽ break () @u₽ break )
  ;; degree sign
  u° (unicode °)
  ur° (macro @en 50 @u° 50 @ru)
  ° (switch ((base-layer rus)) @ur° break () @u° break )
  ;; approximately equal sign
  u≈ (unicode ≈)
  ur≈ (macro @en 50 @u≈ 50 @ru)
  ≈ (switch ((base-layer rus)) @ur≈ break () @u≈ break )
  ;; plus-minus sign
  u± (unicode ±)
  ur± (macro @en 50 @u± 50 @ru)
  ± (switch ((base-layer rus)) @ur± break () @u± break )
  ;; smart quotes
  u« (unicode «)
  u» (unicode »)
  u«» (macro @u« 50 @u» 50 left)
  ur«» (macro @en 50 @u« 50 @u» 50 left 50 @ru)
  u“ (unicode “)
  u” (unicode ”)
  u“” (macro @u“ 50 @u” 50 left)
  ur“” (macro @en 50 @u“ 50 @u” 50 left 50 @ru)
  «” (switch ((base-layer rus_u)) @u«» break ((base-layer rus)) @ur«» break () @u“” break )
  brc (macro S-9 S-0 left)
  []  (switch ((base-layer rus)) (macro @en 50 [ ] left 50 @ru) break () (macro [ ] left) break )
  {}  (switch ((base-layer rus)) (macro @en 50 S-[ S-] left 50 @ru) break () (macro S-[ S-] left) break )
  <>  (switch ((base-layer rus)) (macro @en 50 S-, S-. left 50 @ru) break () (macro S-, S-. left) break )
  -[] (switch ((base-layer rus)) (macro @en 50 home - [ spc ] spc end 50 @ru) break () (macro home - [ spc ] spc end) break )
  cw (switch ((base-layer rus)) (caps-word-custom 2000 (a b c d e f g h i j k l m n o p q r s t u v w x y z , . ' ; [ ]) (bspc del)) break () (caps-word 2000) break )
  
  ;; -------------------------------------------------------------------------------------
  ;; switchers to sublayers

  ftab (tap-hold $tap-time $hold-time tab (layer-toggle fun))
  lsym (tap-hold $tap-time $hold-time spc (layer-toggle sym))
  rsym (tap-hold $tap-time $hold-time ret (layer-toggle sym))
  num (tap-hold $tap-time $hold-time ret (layer-toggle num))
  lfun (tap-hold $tap-time $hold-time esc (layer-toggle fun))
  rfun (tap-hold $tap-time $hold-time @cw (layer-toggle fun))
)

;; -------------------------------------------------------------------------------------
;; home row mods, settings

(defvar
  tap-time 200
  hold-time 200

  hold-index 150
  hold-middle 150
  hold-ring 170
  hold-pinky 195
)

;; -------------------------------------------------------------------------------------
;; home row mods, GNU Linux and Windows version

(platform (win winiov2 wintercept linux)
  (defalias
    nav (tap-hold $tap-time $hold-time spc (layer-toggle nav))
    lz (tap-hold $tap-time $hold-pinky z (layer-toggle mos))
    lф (tap-hold $tap-time $hold-pinky a (layer-toggle mos))
    _lф (tap-hold $tap-time $hold-pinky @_ф (layer-toggle mos))
    mopt @lctl
    ocm lalt
    ;; modtaps (GACS)
    ;; eng ;; colemak
    ha (tap-hold $tap-time $hold-pinky a lmet)
    hr (tap-hold $tap-time $hold-ring r lalt)
    hs (tap-hold $tap-time $hold-middle s lctl)
    ht (tap-hold $tap-time $hold-index t lsft)
    hn (tap-hold $tap-time $hold-index n lsft)
    he (tap-hold $tap-time $hold-middle e lctl)
    hi (tap-hold $tap-time $hold-ring i lalt)
    ho (tap-hold $tap-time $hold-pinky o lmet)
    ;; eng ;; qwerty
    hqs (tap-hold $tap-time $hold-ring s lalt)
    hd (tap-hold $tap-time $hold-middle d lctl)
    hf (tap-hold $tap-time $hold-index f lsft)
    hj (tap-hold $tap-time $hold-index j lsft)
    hk (tap-hold $tap-time $hold-middle k lctl)
    hl (tap-hold $tap-time $hold-ring l lalt)
    hq' (tap-hold $tap-time $hold-pinky ' lmet)
    ;; rus ;; diktor
    hу (tap-hold $tap-time $hold-pinky @у (multi lmet (layer-while-held eng)))
    hи (tap-hold $tap-time $hold-ring @и (multi lalt (layer-while-held eng)))
    hе (tap-hold $tap-time $hold-middle @е (multi lctl (layer-while-held eng)))
    hо (tap-hold $tap-time $hold-index @о lsft)
    hн (tap-hold $tap-time $hold-index @н rsft)
    hт (tap-hold-except-keys $tap-time $hold-middle @т (multi lctl (layer-while-held eng)) (w))
    hс (tap-hold $tap-time $hold-ring @с (multi lalt (layer-while-held eng)))
    hр (tap-hold $tap-time $hold-pinky @р (multi lmet (layer-while-held eng)))
    ;; rus ;; йцукен
    hф (tap-hold $tap-time $hold-pinky @ф (multi lmet (layer-while-held eng)))
    hы (tap-hold $tap-time $hold-ring @ы (multi lalt (layer-while-held eng)))
    hв (tap-hold $tap-time $hold-middle @в (multi lctl (layer-while-held eng)))
    hа (tap-hold $tap-time $hold-index @а lsft)
    hл (tap-hold $tap-time $hold-middle @л (multi lctl (layer-while-held eng)))
    hд (tap-hold $tap-time $hold-ring @д (multi lalt (layer-while-held eng)))
    hж (tap-hold $tap-time $hold-pinky @ж (multi lmet (layer-while-held eng)))
    ;; rus_u ;; diktor
    _hу (tap-hold $tap-time $hold-pinky @_у (multi lmet (layer-while-held eng)))
    _hи (tap-hold $tap-time $hold-ring @_и (multi lalt (layer-while-held eng)))
    _hе (tap-hold $tap-time $hold-middle @_е (multi lctl (layer-while-held eng)))
    _hо (tap-hold $tap-time $hold-index @_о lsft)
    _hн (tap-hold $tap-time $hold-index @_н lsft)
    _hт (tap-hold $tap-time $hold-middle @_т (multi lctl (layer-while-held eng)))
    _hс (tap-hold $tap-time $hold-ring @_с (multi lalt (layer-while-held eng)))
    _hр (tap-hold $tap-time $hold-pinky @_р (multi lmet (layer-while-held eng)))
    ;; num
    h: (tap-hold $tap-time $hold-ring @: rmet)
    h4 (tap-hold $tap-time $hold-ring 4 lalt)
    h5 (tap-hold $tap-time $hold-middle 5 lctl)
    h6 (tap-hold $tap-time $hold-pinky 6 lsft)
    hn- (tap-hold $tap-time $hold-index - rsft)
    h_ (tap-hold $tap-time $hold-pinky @_ lalt)
    hbspc (tap-hold $tap-time $hold-pinky bspc lmet)
    ;; sym
    h\ (tap-hold $tap-time $hold-pinky \ lmet)
    hlb (tap-hold $tap-time $hold-ring @lb lalt)
    h- (tap-hold $tap-time $hold-middle - lctl)
    hrb (tap-hold $tap-time $hold-index @rb lsft)
    h{ (tap-hold $tap-time $hold-index @{ lsft)
    h; (tap-hold $tap-time $hold-middle @; lctl)
    h} (tap-hold $tap-time $hold-ring @} lalt)
    h! (tap-hold $tap-time $hold-pinky @! lmet)
    ;; fun
    f11 (tap-hold $tap-time $hold-pinky f11 lmet)
    f4 (tap-hold $tap-time $hold-ring f4 lalt)
    f5 (tap-hold $tap-time $hold-middle f5 lctl)
    f6 (tap-hold $tap-time $hold-index f6 lsft)
    kp4 (tap-hold $tap-time $hold-index 4 lsft)
    kp5 (tap-hold $tap-time $hold-middle 5 lctl)
    kp6 (tap-hold $tap-time $hold-ring 6 lalt)
  )
)

;; -------------------------------------------------------------------------------------
;; home row mods, MacOS version

(platform (macos)
  (defalias
    nav (tap-hold $tap-time $hold-time spc (layer-toggle nav_mac))
    lz (tap-hold $tap-time $hold-pinky z (layer-toggle mos_mac))
    lф (tap-hold $tap-time $hold-pinky a (layer-toggle mos_mac))
    _lф (tap-hold $tap-time $hold-pinky @_ф (layer-toggle mos_mac))
    mopt (tap-hold $tap-time $hold-middle @lmet lalt)
    ocm (tap-hold $tap-time $hold-pinky lalt lmet)
    ;; modtaps (GCAS)
    ;; eng ;; colemak
    ha (tap-hold $tap-time $hold-pinky a lctl)
    hr (tap-hold $tap-time $hold-ring r lalt)
    hs (tap-hold $tap-time $hold-middle s lmet)
    ht (tap-hold $tap-time $hold-index t lsft)
    hn (tap-hold $tap-time $hold-index n lsft)
    he (tap-hold $tap-time $hold-middle e lmet)
    hi (tap-hold $tap-time $hold-ring i lalt)
    ho (tap-hold $tap-time $hold-pinky o lctl)
    ;; eng ;; qwerty
    hqs (tap-hold $tap-time $hold-ring s lalt)
    hd (tap-hold $tap-time $hold-middle d lmet)
    hf (tap-hold $tap-time $hold-index f lsft)
    hj (tap-hold $tap-time $hold-index j lsft)
    hk (tap-hold $tap-time $hold-middle k lmet)
    hl (tap-hold $tap-time $hold-ring l lalt)
    hq' (tap-hold $tap-time $hold-pinky ' lctl)
    ;; rus ;; diktor
    hу (tap-hold $tap-time $hold-pinky @у (multi lctl (layer-while-held eng)))
    hи (tap-hold $tap-time $hold-ring @и (multi lalt (layer-while-held eng)))
    hе (tap-hold $tap-time $hold-middle @е (multi lmet (layer-while-held eng)))
    hо (tap-hold $tap-time $hold-index @о lsft)
    hн (tap-hold $tap-time $hold-index @н rsft)
    hт (tap-hold-except-keys $tap-time $hold-middle @т (multi lmet (layer-while-held eng)) (w))
    hс (tap-hold $tap-time $hold-ring @с (multi lalt (layer-while-held eng)))
    hр (tap-hold $tap-time $hold-pinky @р (multi lctl (layer-while-held eng)))
    ;; rus ;; йцукен
    hф (tap-hold $tap-time $hold-pinky @ф (multi lctl (layer-while-held eng)))
    hы (tap-hold $tap-time $hold-ring @ы (multi lalt (layer-while-held eng)))
    hв (tap-hold $tap-time $hold-middle @в (multi lmet (layer-while-held eng)))
    hа (tap-hold $tap-time $hold-index @а lsft)
    hл (tap-hold $tap-time $hold-middle @л (multi lmet (layer-while-held eng)))
    hд (tap-hold $tap-time $hold-ring @д (multi lalt (layer-while-held eng)))
    hж (tap-hold $tap-time $hold-pinky @ж (multi lctl (layer-while-held eng)))
    ;; rus_u ;; diktor
    _hу (tap-hold $tap-time $hold-pinky @_у (multi lctl (layer-while-held eng)))
    _hи (tap-hold $tap-time $hold-ring @_и (multi lalt (layer-while-held eng)))
    _hе (tap-hold $tap-time $hold-middle @_е (multi lmet (layer-while-held eng)))
    _hо (tap-hold $tap-time $hold-index @_о lsft)
    _hн (tap-hold $tap-time $hold-index @_н lsft)
    _hт (tap-hold $tap-time $hold-middle @_т (multi lmet (layer-while-held eng)))
    _hс (tap-hold $tap-time $hold-ring @_с (multi lalt (layer-while-held eng)))
    _hр (tap-hold $tap-time $hold-pinky @_р (multi lctl (layer-while-held eng)))
    ;; num
    h: (tap-hold $tap-time $hold-ring @: rctl)
    h4 (tap-hold $tap-time $hold-ring 4 lalt)
    h5 (tap-hold $tap-time $hold-middle 5 lmet)
    h6 (tap-hold $tap-time $hold-pinky 6 lsft)
    hn- (tap-hold $tap-time $hold-index - rsft)
    h_ (tap-hold $tap-time $hold-pinky @_ lalt)
    hbspc (tap-hold $tap-time $hold-pinky bspc lctl)
    ;; sym
    h\ (tap-hold $tap-time $hold-pinky \ lctl)
    hlb (tap-hold $tap-time $hold-ring @lb lalt)
    h- (tap-hold $tap-time $hold-middle - lmet)
    hrb (tap-hold $tap-time $hold-index @rb lsft)
    h{ (tap-hold $tap-time $hold-index @{ lsft)
    h; (tap-hold $tap-time $hold-middle @; lmet)
    h} (tap-hold $tap-time $hold-ring @} lalt)
    h! (tap-hold $tap-time $hold-pinky @! lctl)
    ;; fun
    f11 (tap-hold $tap-time $hold-pinky f11 lctl)
    f4 (tap-hold $tap-time $hold-ring f4 lalt)
    f5 (tap-hold $tap-time $hold-middle f5 lmet)
    f6 (tap-hold $tap-time $hold-index f6 lsft)
    kp4 (tap-hold $tap-time $hold-index 4 lsft)
    kp5 (tap-hold $tap-time $hold-middle 5 lmet)
    kp6 (tap-hold $tap-time $hold-ring 6 lalt)
  )
)
