(defsrc
  f1   f2   f3   f3   f5               f6   f7   f8   f9   f10  f11  f12  del
  1    2    3    4    5                6    7    8    9    0    -    =    bspc

  q    w    e    r    t                y    u    i    o    p
  a    s    d    f    g                h    j    k    l    ;
  z    x    c    v    b                n    m    ,    .    /
                 lalt spc f24     ralt rctl left

                                       rmet menu
)

(deflayer eng
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  q    w    f    p    g                j    l    u    y    '
 @a   @r   @s   @t    d                h   @n   @e   @i   @o
 @z    x    c    v    b                k    m    ,    .   @_/
               @lfun @nav @mos   @sym @num @fun

                                      @num @fun
)

(deflayer rus
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

 @ц   @ь   @я   @,?  @.!              @з   @в   @к   @д   @ч
 @у   @и   @е   @о   @а               @л   @н   @т   @с   @р
 @ф   @э   @х   @ы   @ю               @б   @м   @п   @г   @ж
               @lfun @nav @mos @sym_r @num @fun

                                      @num @fun
)

(deflayer rus_u
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

 @_ц  @_ь  @_я  @_,? @_.!             @_з  @_в  @_к  @_д  @_ч
 @_у  @_и  @_е  @_о  @_а              @_л  @_н  @_т  @_с  @_р
 @_ф  @_э  @_х  @_ы  @_ю              @_б  @_м  @_п  @_г  @_ж
               @lfun @nav @mos   @sym @num @fun

                                      @num @fun
)

(deflayer gam
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  tab  q    w    e    r                y    u    i    o    p
  lsft a    s    d    f                h    j    k    l    ;
  lctl z    x    c    v                n    m    ,    .    @_/
                 lalt spc @gfn    prnt [    ]

                                       [    ]
)

(deflayer gfn
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  esc  7    8    9    t                tab  home up   end  del
  caps 4    5    6    g                lsft left down rght bspc
  0    1    2    3    b                lctl pgdn menu pgup ret
                 ret  _   _       _    _    _

                                       _    _
)

(deflayer num
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  grv  7    8    9    S-8              lrld _    _    _    del
 @:   @4   @5   @6    =               @cw  @s-  @c,  @a.  @bspc
  0    1    2    3   @/                _    _    _    _    ret
               @lfun @nav 0       _    _    _

                                       _    _
)

(deflayer sym
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  S-'  S-,  =    S-.  grv              S-6  [    S--  ]    '
 @\   @lb  @-   @rb   S-=              S-5 @{   @;   @}   @!
  S-3  S-8  S-;  /    S-4              S-2  S-\  S-`  S-7  S-/
               @lfun @nav @mos    ret @num @fun

                                      @num @fun
)

(deflayer sym_r
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  S-2 @<    =   @>   @`               @^   @[    S-- @]   @'
 @\   @lb  @-   @rb   S-=              S-5 @{   @;   @}   @!
 @#    S-8  S-6  S-\ @$               @at  @|   @~   @&    S-7
               @lfun @nav @mos    ret @num @fun

                                      @num @fun
)

(deflayer fun
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  f12  f7   f8   f9   volu            slck  kp7  kp8  kp9  del
 @f11 @f4  @f5  @f6   vold            caps @kp4 @kp5 @kp6 @bspc
  f10  f1  @f2   f3   mute             kp0  kp1  kp2  kp3  ret
                nlck @nav brk    kprt @num  nlck

                                      @num  nlck
)

(deflayer nav
  _    _    _    _    _                _    _    _    _    _    _    _    _
  f1   f2   f3   f3   f5               f6   f7   f8   f9   f10  f11  f12  del

  del  C-S-tab tab  C-tab @ter             ins  home up   end  del
  lmet lalt   @lctl lsft  prnt            @cw   left down rght bspc
  C-z  C-x     C-c  C-v   @vsc             mltp pgup menu pgdn ret
                    esc   spc tab     mrtp mltp _

                                           mltp _
)

(deflayer mos
  _    _    _    _    _                _    _    _    _    _    _    _    _
  _    _    _    _    _                _    _    _    _    _    _    _    _

  del  C-S-tab tab  C-tab @ter         _   @mwl @mu  @mwr @mwu
  lmet lalt   @lctl lsft  prnt        @cw  @ml  @md  @mr  @mwd
  C-z  C-x     C-c  C-v   @vsc         _    mltp mrtp mmtp ret
                    esc   spc tab mrtp mltp mmtp

                                       mltp mmtp
)

(defvar
  tap-time 200
  hold-time 200

  hold-index 150
  hold-middle 150
  hold-ring 170
  hold-pinky 195
)

(defcfg concurrent-tap-hold yes)
(defchordsv2
  (r e) @eng $hold-time all-released        (               gam gfn num sym fun nav mos)
  (i u) @rus $hold-time all-released        (                   gfn num sym fun nav mos)
  (, m) @rus_u $hold-time all-released      (                   gfn num sym fun nav mos)
  (o i) (switch ((base-layer rus)) @й break
                ((base-layer rus_u)) @_й break )
           $hold-time all-released          (eng            gam gfn num sym fun nav mos)
  (w e) (switch ((base-layer rus)) grv break
        ((base-layer rus_u)) @_ё break )
           $hold-time all-released          (eng            gam gfn num sym fun nav mos)
  (v c) @gam $hold-time all-released        (               gam gfn num sym fun nav mos)
)

(defalias
  ;; system combinations to switch languages
  en C-8
  ru C-9

  ;; layouts
  eng (multi (layer-switch eng) @en)
  rus (multi (layer-switch rus) @ru)
  rus_u (multi (layer-switch rus_u) @en)
  gam (multi (layer-switch gam) @en)

  ;; eng
  a (tap-hold $tap-time $hold-pinky a lmet)
  r (tap-hold $tap-time $hold-ring r lalt)
  s (tap-hold $tap-time $hold-middle s lctl)
  t (tap-hold $tap-time $hold-index t lsft)
  n (tap-hold $tap-time $hold-index n lsft)
  e (tap-hold $tap-time $hold-middle e lctl)
  i (tap-hold $tap-time $hold-ring i lalt)
  o (tap-hold $tap-time $hold-pinky o lmet)
  z (tap-hold $tap-time $hold-pinky z (layer-toggle mos))
  _/ (tap-hold $tap-time $hold-pinky / (layer-toggle fun))

  ;; nav
  cw (caps-word 2000)
  lctl (one-shot 500 lctl)
  term (macro lmet 300 S-t e r m i n a l 400 ret)
  terr (macro @en 50 lmet 300 S-t e r m i n a l 400 ret 50 @ru)
  vscode (macro lmet 300 S-v i s u a l 50 spc S-s t u d i o 50 spc S-c o d e 400 ret)
  vscodr (macro @en 50 lmet 300 S-v i s u a l 50 spc S-s t u d i o 50 spc S-c o d e 400 ret 50 @ru)
  vsc (switch
    ((base-layer rus)) @vscodr break
    () @vscode break
  )
  ter (switch
    ((base-layer rus)) @terr break
    () @term break
  )

  ;; mos
  mu (movemouse-up 1 1)
  md (movemouse-down 1 1)
  ml (movemouse-left 1 1)
  mr (movemouse-right 1 1)
  mwu (mwheel-up 50 120)
  mwd (mwheel-down 50 120)
  mwl (mwheel-left 50 120)
  mwr (mwheel-right 50 120)
  
  ;; rus
  ц w
  ь (fork m (unmod ]) (lsft rsft))
  я z
  ,? (fork S-/ S-7 (lsft rsft))
  .! (fork / S-1 (lsft rsft))
  з p
  в d
  к r
  д l
  ч x
  ш i
  щ o
  у (tap-hold $tap-time $hold-pinky e (multi lmet (layer-while-held eng)))
  и (tap-hold $tap-time $hold-ring b (multi lalt (layer-while-held eng)))
  е (tap-hold $tap-time $hold-middle t (multi lctl (layer-while-held eng)))
  о (tap-hold $tap-time $hold-index j lsft)
  а f
  л k
  н (tap-hold $tap-time $hold-index y rsft)
  т (tap-hold-except-keys $tap-time $hold-middle n (multi lctl (layer-while-held eng)) (w))
  с (tap-hold $tap-time $hold-ring c (multi lalt (layer-while-held eng)))
  р (tap-hold $tap-time $hold-pinky h (multi lmet (layer-while-held eng)))
  й q
  ф (tap-hold $tap-time $hold-pinky a (layer-toggle mos))
  э '
  х [
  ы s
  ю .
  б ,
  м v
  п g
  г u
  ж (tap-hold $tap-time $hold-pinky ; (layer-toggle fun))

  ;; sym
  \ (tap-hold $tap-time $hold-pinky \ lmet)
  lb (tap-hold $tap-time $hold-ring S-9 lalt)
  - (tap-hold $tap-time $hold-middle - lctl)
  rb (tap-hold $tap-time $hold-index S-0 lsft)
  { (tap-hold $tap-time $hold-index (switch ((base-layer rus)) (macro @en 50 S-[ 50 @ru) break () S-[ break ) lsft)
  ; (tap-hold $tap-time $hold-middle (switch ((base-layer rus)) S-4 break () ; break ) lctl)
  } (tap-hold $tap-time $hold-ring (switch ((base-layer rus)) (macro @en 50 S-] 50 @ru) break () S-] break ) lalt)
  ! (tap-hold $tap-time $hold-pinky S-1 lmet)
  # (macro @en 50 S-3 50 @ru)
  $ (macro @en 50 S-4 50 @ru)
  & (macro @en 50 S-7 50 @ru)
  ' (macro @en 50 ' 50 @ru)
  < (macro @en 50 S-, 50 @ru)
  > (macro @en 50 S-. 50 @ru)
  [ (macro @en 50 [ 50 @ru)
  ] (macro @en 50 ] 50 @ru)
  ^ (macro @en 50 S-6 50 @ru)
  ` (macro @en 50 grv 50 @ru)
  at (macro @en 50 S-2 50 @ru)
  | (macro @en 50 S-\ 50 @ru)
  ~ (macro @en 50 S-grv 50 @ru)
  , (switch ((base-layer rus)) S-/ break () , break ) . (switch ((base-layer rus)) / break () . break )

  ;; num
  : (tap-hold $tap-time $hold-pinky (switch ((base-layer rus)) (macro @en 50 S-6 50 @ru) break () S-; break ) lmet)
  4 (tap-hold $tap-time $hold-ring 4 lalt)
  5 (tap-hold $tap-time $hold-middle 5 lctl)
  6 (tap-hold $tap-time $hold-pinky 6 lsft)
  s- (tap-hold $tap-time $hold-index - rsft)
  c, (tap-hold $tap-time $hold-middle @, rctl)
  a. (tap-hold $tap-time $hold-ring @. ralt)
  / (switch ((base-layer rus)) S-\ break () / break )

  ;; fun
  kp4 (tap-hold $tap-time $hold-index 4 lsft)
  kp5 (tap-hold $tap-time $hold-middle 5 lctl)
  kp6 (tap-hold $tap-time $hold-ring 6 lalt)
  f2 (tap-hold $tap-time $hold-middle f2 lalt)
  f4 (tap-hold $tap-time $hold-ring f4 lalt)
  f5 (tap-hold $tap-time $hold-middle f5 lctl)
  f6 (tap-hold $tap-time $hold-index f6 lsft)
  f11 (tap-hold $tap-time $hold-pinky f11 lmet)
  bspc (tap-hold $tap-time $hold-pinky bspc lmet)

  ;; rus_u
  uц (unicode ц)
  uЦ (unicode Ц)
  _ц (fork @uц @uЦ (lsft rsft))
  uь (unicode ь)
  uъ (unicode ъ)
  _ь (fork @uь @uъ (lsft rsft))
  uя (unicode я)
  uЯ (unicode Я)
  _я (fork @uя @uЯ (lsft rsft))
  u, (unicode ,)
  u? (unicode ?)
  _,? (fork @u, @u? (lsft rsft))
  u. (unicode .)
  u! (unicode !)
  _.! (fork @u. @u! (lsft rsft))
  uз (unicode з)
  uЗ (unicode З)
  _з (fork @uз @uЗ (lsft rsft))
  uв (unicode в)
  uВ (unicode В)
  _в (fork @uв @uВ (lsft rsft))
  uк (unicode к)
  uК (unicode К)
  _к (fork @uк @uК (lsft rsft))
  uд (unicode д)
  uД (unicode Д)
  _д (fork @uд @uД (lsft rsft))
  uч (unicode ч)
  uЧ (unicode Ч)
  _ч (fork @uч @uЧ (lsft rsft))
  uш (unicode ш)
  uШ (unicode Ш)
  _ш (fork @uш @uШ (lsft rsft))
  uщ (unicode щ)
  uЩ (unicode Щ)
  _щ (fork @uщ @uЩ (lsft rsft))
  uу (unicode у)
  uУ (unicode У)
  уУ (fork @uу @uУ (lsft rsft))
  _у (tap-hold $tap-time $hold-pinky @уУ (multi lmet (layer-while-held eng)))
  uи (unicode и)
  uИ (unicode И)
  иИ (fork @uи @uИ (lsft rsft))
  _и (tap-hold $tap-time $hold-ring @иИ (multi lalt (layer-while-held eng)))
  uе (unicode е)
  uЕ (unicode Е)
  еЕ (fork @uе @uЕ (lsft rsft))
  _е (tap-hold $tap-time $hold-middle @еЕ (multi lctl (layer-while-held eng)))
  uо (unicode о)
  uО (unicode О)
  оО (fork @uо @uО (lsft rsft))
  _о (tap-hold $tap-time $hold-index @оО lsft)
  uа (unicode а)
  uА (unicode А)
  _а (fork @uа @uА (lsft rsft))
  uл (unicode л)
  uЛ (unicode Л)
  _л (fork @uл @uЛ (lsft rsft))
  uн (unicode н)
  uН (unicode Н)
  нН (fork @uн @uН (lsft rsft))
  _н (tap-hold $tap-time $hold-index @нН lsft)
  uт (unicode т)
  uТ (unicode Т)
  тТ (fork @uт @uТ (lsft rsft))
  _т (tap-hold $tap-time $hold-middle @тТ (multi lctl (layer-while-held eng)))
  uс (unicode с)
  uС (unicode С)
  сС (fork @uс @uС (lsft rsft))
  _с (tap-hold $tap-time $hold-ring @сС (multi lalt (layer-while-held eng)))
  uр (unicode р)
  uР (unicode Р)
  рР (fork @uр @uР (lsft rsft))
  _р (tap-hold $tap-time $hold-pinky @рР (multi lmet (layer-while-held eng)))
  uй (unicode й)
  uЙ (unicode Й)
  _й (fork @uй @uЙ (lsft rsft))
  uф (unicode ф)
  uФ (unicode Ф)
  _ф (tap-hold $tap-time $hold-pinky (fork @uф @uФ (lsft rsft)) (layer-toggle mos))
  uэ (unicode э)
  uЭ (unicode Э)
  _э (fork @uэ @uЭ (lsft rsft))
  uх (unicode х)
  uХ (unicode Х)
  _х (fork @uх @uХ (lsft rsft))
  uы (unicode ы)
  uЫ (unicode Ы)
  _ы (fork @uы @uЫ (lsft rsft))
  uю (unicode ю)
  uЮ (unicode Ю)
  _ю (fork @uю @uЮ (lsft rsft))
  uб (unicode б)
  uБ (unicode Б)
  _б (fork @uб @uБ (lsft rsft))
  uм (unicode м)
  uМ (unicode М)
  _м (fork @uм @uМ (lsft rsft))
  uп (unicode п)
  uП (unicode П)
  _п (fork @uп @uП (lsft rsft))
  uг (unicode г)
  uГ (unicode Г)
  _г (fork @uг @uГ (lsft rsft))
  uж (unicode ж)
  uЖ (unicode Ж)
  _ж (tap-hold $tap-time $hold-pinky (fork @uж @uЖ (lsft rsft)) (layer-toggle fun))
  uё (unicode ё)
  uЁ (unicode Ё)
  _ё (fork @uё @uЁ (lsft rsft))

  ;; layers
  nav (tap-hold $tap-time $hold-time spc (layer-toggle nav))
  mos (tap-hold $tap-time $hold-time tab (layer-toggle mos))
  lfun (tap-hold $tap-time $hold-time esc (layer-toggle fun))
  gfn (tap-hold $tap-time $hold-time i (layer-toggle gfn))
  sym (tap-hold $tap-time $hold-time ret (layer-toggle sym))
  sym_r (tap-hold $tap-time $hold-time ret (layer-toggle sym_r))
  num (tap-hold $tap-time $hold-time
      (switch
        ((base-layer rus)) i break
        ((base-layer rus_u)) @_ш break 
        () [ break
      )
      (layer-toggle num))
  fun (tap-hold $tap-time $hold-time
      (switch
        ((base-layer rus)) o break
        ((base-layer rus_u)) @_щ break 
        () ] break
      )
      (layer-toggle fun))
)

