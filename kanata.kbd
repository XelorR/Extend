;; What to remap, initial keyboard state definition
(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft up
  lctl lmet lalt f23       spc       f24  ralt rmet rctl left down rght
)

;; Colemak (default) implemented with simple alpha shuffle, requires national US (qwerty) layout to be enabled
(deflayer colemak
  @esc _    _    _    _    _    _    _    _    _    _    _    _    _
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    f    p    g    j    l    u    y    ;    [    ]    \
  @esc @a   @r   @s   @t   d    h    @n   @e   @i   @o   '    @ent
  lsft @z   x    c    v    b    k    m    ,    .    @_/  rsft _
  lmet lalt lctl @mos    @space_nav @sym @ralt rmet rctl _    _    _
)

;; Diktor implemented with simple key remap, requires national RU (йцукен) layout to be enabled
(deflayer diktor
  @esc _     _     _     _     _     _     _     _     _     _     _     _     _
  grv  @_1   @_2   3     @_4   @_5   @_6   @_7   @_8   9     0     @star =     bspc
  tab  @_ц   @_ь   @_я   @_,   @_.   @_з   @_в   @_к   @_д   @_ч   @_ш   @_щ   \
  @esc @_у   @_и   @_е   @_о   @_а   @_л   @_н   @_т   @_с   @_р   @_й   @ent
  lsft @_ф   @_э   @_х   @_ы   @_ю   @_б   @_м   @_п   @_г   @_ж   rsft  _
  @met @alt  @ctl  @mos  @space_nav        @sym @ralt  @rme  @rct  _     _     _
)

;; Diktor implemented with unicode symbols, requires national US (qwerty) layout to be enabled
;; use with caution, prefer the previous one
(deflayer diktor_unicode
  @esc _    _    _    _    _    _    _    _    _    _    _     _     _
  @ёЁ  @1Ъ  @2Ь  @3№  @4%  @5:  @6;  @7-  @8dq 9    0    @star =     bspc
  tab  @цЦ  @ьъ  @яЯ  @,?  @.!  @зЗ  @вВ  @кК  @дД  @чЧ  @шШ   @щЩ   \
  @esc @dуУ @dиИ @dеЕ @dоО @аА  @лЛ  @dнН @dтТ @dсС @dрР @йЙ   @ent
  lsft @фФ  @эЭ  @хХ  @ыЫ  @юЮ  @бБ  @мМ  @пП  @гГ  @жЖ  rsft  _
  @met @alt @ctl @mos    @space_nav @sym @ralt @rme @rct _     _     _
)

;; standard modless qwerty
(deflayer gaming
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  esc  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    @ent
  lsft z    x    c    v    b    n    m    ,    .    /    rsft up
  lctl @nav lalt _          spc      _    ralt rmet rctl left down rght
)

;; Extend (navigation/edition/function) layer
(deflayer navigation
  _    _     _    _     _      _     _    _    _    _    _    _    _    _
  f13  f1    f2   f3    f4     f5    f6   f7   f8   f9   f10  f11  f12  brk
  @«”  ⌦    C-S-↹ ↹     C-↹    @ter  ins  ⇤    ↑    ⇥    ⌦    bck  fwd  @fav
  ⎋    ‹⌘    ‹⌥   @⎈    ‹⇧     ⎙     @cw  ←    ↓    →    ⌫    @—   mltp
  ⇧›   @undo @cut @copy @paste @redo mltp ⇞    ☰    ⇟    ⤶    _    @🖱↑
  ⌘›   ⌥›    ⎈›   _        _              _    M-e  _    @vsc @🖱←  @🖱↓  @🖱→
)

(deflayer num
  _    _     _     _     _     _     _     _     _     _     _     _     _     _
  lrld @:    @,    @.    -     XX    XX    -     @,    @.    @:    🔈−   🔈+   🔇
  _    del   7     8     9     XX    XX    7     8     9     del   ◀◀    ▶▶    ▶⏸
  esc  ‹⌘    @4g   @5h   @6g   XX    XX    @4h   @5h   @6h   @bspc XX    🔇
  _    0     1     2     3     XX    0     1     2     3     ret   XX    🔈+
  @dr0 @dms  @dp0  _           spc         _     XX    XX    XX    ◀◀    🔈−   ▶▶
)

(deflayer symbol
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   _    _
  @«”  @dq  @<   =    @>   @`   @^   @[   S--  @]   @'   XX   _    _
  _    @\   @lb  @-   @rb  S-=  S-5  @{   @;   @}   @!   @—   _
  _    @#   @*   @:   @/   @$   @at  @|   @~   @&   @?   XX   _
  _    _    _    _      @space_nav   _    _    _    _    _    _    _
)

(deflayer mouse
  _    _     _    _     _      _     _    _    _    _    _    _    _    _
  _    _     _    _     _      _     _    _    _    _    _    _    _    _
  _    ⌦    C-S-↹ ↹     C-↹    @ter  _    @🖱w← @🖱↑  @🖱w→ @🖱w↑ _    _    _
  _    ‹⌘    ‹⌥   @⎈    ‹⇧     ⎙     _    @🖱←  @🖱↓  @🖱→  @🖱w↓ _    _
  _    @undo @cut @copy @paste @redo _    mltp mrtp mmtp ret  _    _
  _    _     _    _              spc      mrtp mltp _    _    _    _    _
)

;; Note on layout switching.
;;
;; My language binding for system layouts:
;; - Ctrl-8 = Qwerty (colemak and diktor_unicode layers depends on it)
;; - Ctrl-9 = Йцукен (diktor layer depends on it)
;;
;; In this configuration I heavily rely on C-8 and C-9 shortcuts,
;; which can be set up in KDE Plasma or Windows 11 via system settings.
;;
;; If C-8 snd C-9 are not binded, it is possible to use
;;   Colemak and Diktor unicode version with US layout only.

(defcfg concurrent-tap-hold yes)
(defchordsv2
  ;; Switching languages with chords
  ;; Colemak
      (w e) @cmk $hold-time all-released (gaming navigation num)
  ;; Qwerty, no modtaps
      (x c) @gam $hold-time all-released (gaming navigation num)
  ;; Diktor
      (i o) @dkt $hold-time all-released (navigation num)
  ;; Diktor unicode implementation
      (, .) @dktu $hold-time all-released (navigation num)
)

;; Variables and other settings
(defvar
  tap-time 200
  hold-time 200

  hold-index 150
  hold-middle 150
  hold-ring 170
  hold-pinky 195
)

(defalias
  ;; navigation "Extend" layer
  space_nav (tap-hold $tap-time $hold-time spc (layer-toggle navigation))
  nav (layer-toggle navigation)
  mos (tap-hold $tap-time $hold-time tab (layer-toggle mouse))
  sym (tap-hold $tap-time $hold-time ret (layer-toggle symbol))

  ;; layer to switch layouts
  esc (tap-hold $tap-time $hold-time esc (layer-toggle num))
  ent (tap-hold $tap-time $hold-time ret (layer-toggle num))
  z (tap-hold $tap-time $hold-pinky z (layer-toggle num))
  _/ (tap-hold $tap-time $hold-pinky / (layer-toggle num))
  ralt (tap-hold $tap-time $hold-time ralt (layer-toggle symbol))

  ;; layouts
  cmk (multi (layer-switch colemak) C-8)
  dkt (multi (layer-switch diktor) C-9)
  dktu (multi (layer-switch diktor_unicode) C-8)
  gam (multi (layer-switch gaming) C-8)

  ;; some symbols for Extend
  ;; launchers
  term (macro lmet 300 S-t e r m i n a l 400 ret)
  terr (macro C-8 50 lmet 300 S-t e r m i n a l 400 ret 50 C-9)
  vscode (macro lmet 300 S-v i s u a l 50 spc S-s t u d i o 50 spc S-c o d e 400 ret)
  vscodr (macro C-8 50 lmet 300 S-v i s u a l 50 spc S-s t u d i o 50 spc S-c o d e 400 ret 50 C-9)
  vsc (switch
    ((base-layer diktor)) @vscodr break
    () @vscode break
  )
  ter (switch
    ((base-layer diktor)) @terr break
    () @term break
  )
  ;; unicode
  u— (unicode —)
  ur— (macro C-8 50 @u— 50 C-9)
  — (switch
    ((base-layer diktor)) @ur— break
    () @u— break
  )
  u« (unicode «)
  u» (unicode »)
  u«» (macro @u« 50 @u» 50 left)
  ur«» (macro C-8 50 @u« 50 @u» 50 left 50 C-9)
  u“ (unicode “)
  u” (unicode ”)
  u“” (macro @u“ 50 @u” 50 left)
  ur“” (macro C-8 50 @u“ 50 @u” 50 left 50 C-9)
  «” (switch
    ((base-layer diktor_unicode)) @u«» break
    ((base-layer diktor)) @ur«» break
    () @u“” break
  )
  ;; shortcuts
  cw (caps-word 2000)
  fav C-S-o
  undo C-z
  cut C-x
  copy C-c
  paste C-v
  redo C-S-v
  ⎈ (one-shot 500 lctl)

  ;; symbols for num layer
  dq (switch
    ((base-layer diktor)) S-2 break
    () S-' break
  )
  < (switch
    ((base-layer diktor)) (macro C-8 50 S-, 50 C-9) break
    () S-, break
  )
  > (switch
    ((base-layer diktor)) (macro C-8 50 S-. 50 C-9) break
    () S-. break
  )
  ` (switch
    ((base-layer diktor)) (macro C-8 50 grv 50 C-9) break
    () grv break
  )
  ~ (switch
    ((base-layer diktor)) (macro C-8 50 S-grv 50 C-9) break
    () S-grv break
  )
  / (switch
    ((base-layer diktor)) S-\ break
    () / break
  )
  # (switch
    ((base-layer diktor)) (macro C-8 50 S-3 50 C-9) break
    () S-3 break
  )
  ^ (switch
    ((base-layer diktor)) (macro C-8 50 S-6 50 C-9) break
    () S-6 break
  )
  \ (tap-hold $tap-time $hold-pinky \ lmet)
  lb (tap-hold $tap-time $hold-ring S-9 lalt)
  - (tap-hold $tap-time $hold-middle - lctl)
  rb (tap-hold $tap-time $hold-index S-0 lsft)
  [ (switch
    ((base-layer diktor)) (macro C-8 50 [ 50 C-9) break
    () [ break
  )
  ] (switch
    ((base-layer diktor)) (macro C-8 50 ] 50 C-9) break
    () ] break
  )
  { (tap-hold $tap-time $hold-index (switch
    ((base-layer diktor)) (macro C-8 50 S-[ 50 C-9) break
    () S-[ break
  ) lsft)
  } (tap-hold $tap-time $hold-ring (switch
    ((base-layer diktor)) (macro C-8 50 S-] 50 C-9) break
    () S-] break
  ) lalt)
  | (switch
    ((base-layer diktor)) (macro C-8 50 S-\ 50 C-9) break
    () S-\ break
  )
  $ (switch
    ((base-layer diktor)) (macro C-8 50 S-4 50 C-9) break
    () S-4 break
  )
  & (switch
    ((base-layer diktor)) (macro C-8 50 S-7 50 C-9) break
    () S-7 break
  )
  ' (switch
    ((base-layer diktor)) (macro C-8 50 ' 50 C-9) break
    () ' break
  )
  at (switch
    ((base-layer diktor)) (macro C-8 50 S-2 50 C-9) break
    () S-2 break
  )
  : (switch
    ((base-layer diktor)) S-6 break
    () S-; break
  )
  ; (tap-hold $tap-time $hold-middle (switch
    ((base-layer diktor)) S-4 break
    () ; break
  ) lctl)
  , (switch
    ((base-layer diktor)) S-/ break
    () , break
  )
  . (switch
    ((base-layer diktor)) / break
    () . break
  )
  ! (tap-hold $tap-time $hold-pinky S-1 lmet)
  ? (switch
    ((base-layer diktor)) S-7 break
    () S-/ break
  )
  4h (tap-hold $tap-time $hold-index 4 lsft)
  5h (tap-hold $tap-time $hold-middle 5 lctl)
  6h (tap-hold $tap-time $hold-ring 6 lalt)
  4g (tap-hold $tap-time $hold-ring 4 lalt)
  6g (tap-hold $tap-time $hold-index 6 lsft)
  bspc (tap-hold $tap-time $hold-pinky bspc lmet)
  * S-8

  ;; mouse
  🖱↑ (movemouse-up 1 1)
  🖱↓ (movemouse-down 1 1)
  🖱← (movemouse-left 1 1)
  🖱→ (movemouse-right 1 1)
  🖱w↑ (mwheel-up 50 120)
  🖱w↓ (mwheel-down 50 120)
  🖱w← (mwheel-left 50 120)
  🖱w→ (mwheel-right 50 120)

  ;; dynamic macro
  dr0 (dynamic-macro-record 0)
  dms dynamic-macro-record-stop
  dp0 (dynamic-macro-play 0)

  ;; colemak modtaps
  a (tap-hold $tap-time $hold-pinky a lmet)
  r (tap-hold $tap-time $hold-ring r lalt)
  s (tap-hold $tap-time $hold-middle s lctl)
  t (tap-hold $tap-time $hold-index t lsft)
  n (tap-hold $tap-time $hold-index n rsft)
  e (tap-hold $tap-time $hold-middle e rctl)
  i (tap-hold $tap-time $hold-ring i ralt)
  o (tap-hold $tap-time $hold-pinky o rmet)

;; Diktor symbols
  _1 (fork 1 S-] (lsft rsft))
  _2 (fork 2 S-m (lsft rsft))
  ;; 3 is the same in йцукен
  _4 (fork 4 S-5 (lsft rsft))
  _5 (fork 5 S-6 (lsft rsft))
  _6 (fork 6 S-4 (lsft rsft))
  _7 (fork 7 (unmod -) (lsft rsft))
  _8 (fork 8 S-2 (lsft rsft))
  _ц w
  _ь (fork m (unmod ]) (lsft rsft))
  _я z
  _, (fork S-/ S-7 (lsft rsft))
  _. (fork / S-1 (lsft rsft))
  _з p
  _в d
  _к r
  _д l
  _ч x
  _ш i
  _щ o
  _у (tap-hold $tap-time $hold-pinky e (multi lmet (layer-while-held colemak)))
  _и (tap-hold $tap-time $hold-ring b (multi lalt (layer-while-held colemak)))
  _е (tap-hold $tap-time $hold-middle t (multi lctl (layer-while-held colemak)))
  _о (tap-hold $tap-time $hold-index j lsft)
  _а f
  _л k
  _н (tap-hold $tap-time $hold-index y rsft)
  _т (tap-hold $tap-time $hold-middle n (multi rctl (layer-while-held colemak)))
  _с (tap-hold $tap-time $hold-ring c (multi ralt (layer-while-held colemak)))
  _р (tap-hold $tap-time $hold-pinky h (multi rmet (layer-while-held colemak)))
  _й q
  _ф (tap-hold $tap-time $hold-pinky a (layer-toggle num))
  _э '
  _х [
  _ы s
  _ю .
  _б ,
  _м v
  _п g
  _г u
  _ж (tap-hold $tap-time $hold-pinky ; (layer-toggle num))
  
  ;; ensure modifiers to work as in colemak
  ctl (multi lctl (layer-while-held colemak))
  met (multi lmet (layer-while-held colemak))
  alt (multi lalt (layer-while-held colemak))
  rct (multi rctl (layer-while-held colemak))
  rme (multi rmet (layer-while-held colemak))
  ral (multi ralt (layer-while-held colemak))

  ;; Unicode symbols for Diktor layout
  ;; Row 1
  Ъ (unicode Ъ)
  1Ъ (fork 1 @Ъ (lsft rsft))

  Ь (unicode Ь)
  2Ь (fork 2 @Ь (lsft rsft))

  № (unicode №)
  3№ (fork 3 @№ (lsft rsft))

  4% (fork 4 S-5 (lsft rsft))

  5: (fork 5 S-; (lsft rsft))

  6; (fork 6 ; (lsft rsft))

  7- (fork 7 (unmod -) (lsft rsft))

  8dq (fork 8 S-' (lsft rsft))

  star (fork S-8 S-- (lsft rsft))

  ;; Row 2
  ц (unicode ц)
  Ц (unicode Ц)
  цЦ (fork @ц @Ц (lsft rsft))

  ь (unicode ь)
  ъ (unicode ъ)
  ьъ (fork @ь @ъ (lsft rsft))

  я (unicode я)
  Я (unicode Я)
  яЯ (fork @я @Я (lsft rsft))

  u, (unicode ,)
  u? (unicode ?)
  ,? (fork @u, @u? (lsft rsft))

  u. (unicode .)
  u! (unicode !)
  .! (fork @u. @u! (lsft rsft))

  з (unicode з)
  З (unicode З)
  зЗ (fork @з @З (lsft rsft))

  в (unicode в)
  В (unicode В)
  вВ (fork @в @В (lsft rsft))

  к (unicode к)
  К (unicode К)
  кК (fork @к @К (lsft rsft))

  д (unicode д)
  Д (unicode Д)
  дД (fork @д @Д (lsft rsft))

  ч (unicode ч)
  Ч (unicode Ч)
  чЧ (fork @ч @Ч (lsft rsft))

  ш (unicode ш)
  Ш (unicode Ш)
  шШ (fork @ш @Ш (lsft rsft))

  щ (unicode щ)
  Щ (unicode Щ)
  щЩ (fork @щ @Щ (lsft rsft))

  ;; Row 3
  у (unicode у)
  У (unicode У)
  уУ (fork @у @У (lsft rsft))
  dуУ (tap-hold $tap-time $hold-pinky @уУ (multi lmet (layer-while-held colemak)))

  и (unicode и)
  И (unicode И)
  иИ (fork @и @И (lsft rsft))
  dиИ (tap-hold $tap-time $hold-ring @иИ (multi lalt (layer-while-held colemak)))

  е (unicode е)
  Е (unicode Е)
  еЕ (fork @е @Е (lsft rsft))
  dеЕ (tap-hold $tap-time $hold-middle @еЕ (multi lctl (layer-while-held colemak)))

  о (unicode о)
  О (unicode О)
  оО (fork @о @О (lsft rsft))
  dоО (tap-hold $tap-time $hold-index @оО lsft)

  а (unicode а)
  А (unicode А)
  аА (fork @а @А (lsft rsft))

  л (unicode л)
  Л (unicode Л)
  лЛ (fork @л @Л (lsft rsft))

  н (unicode н)
  Н (unicode Н)
  нН (fork @н @Н (lsft rsft))
  dнН (tap-hold $tap-time $hold-index @нН lsft)

  т (unicode т)
  Т (unicode Т)
  тТ (fork @т @Т (lsft rsft))
  dтТ (tap-hold $tap-time $hold-middle @тТ (multi lctl (layer-while-held colemak)))

  с (unicode с)
  С (unicode С)
  сС (fork @с @С (lsft rsft))
  dсС (tap-hold $tap-time $hold-ring @сС (multi lalt (layer-while-held colemak)))

  р (unicode р)
  Р (unicode Р)
  рР (fork @р @Р (lsft rsft))
  dрР (tap-hold $tap-time $hold-pinky @рР (multi lmet (layer-while-held colemak)))

  й (unicode й)
  Й (unicode Й)
  йЙ (fork @й @Й (lsft rsft))

  ;; Row 4
  ф (unicode ф)
  Ф (unicode Ф)
  фФ (tap-hold $tap-time $hold-pinky (fork @ф @Ф (lsft rsft)) (layer-toggle num))

  э (unicode э)
  Э (unicode Э)
  эЭ (fork @э @Э (lsft rsft))

  х (unicode х)
  Х (unicode Х)
  хХ (fork @х @Х (lsft rsft))

  ы (unicode ы)
  Ы (unicode Ы)
  ыЫ (fork @ы @Ы (lsft rsft))

  ю (unicode ю)
  Ю (unicode Ю)
  юЮ (fork @ю @Ю (lsft rsft))

  б (unicode б)
  Б (unicode Б)
  бБ (fork @б @Б (lsft rsft))

  м (unicode м)
  М (unicode М)
  мМ (fork @м @М (lsft rsft))

  п (unicode п)
  П (unicode П)
  пП (fork @п @П (lsft rsft))

  г (unicode г)
  Г (unicode Г)
  гГ (fork @г @Г (lsft rsft))

  ж (unicode ж)
  Ж (unicode Ж)
  жЖ (tap-hold $tap-time $hold-pinky (fork @ж @Ж (lsft rsft)) (layer-toggle num))

  ё (unicode ё)
  Ё (unicode Ё)
  ёЁ (fork @ё @Ё (lsft rsft))
)
